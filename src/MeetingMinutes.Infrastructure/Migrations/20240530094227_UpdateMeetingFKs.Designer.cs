// <auto-generated />
using System;
using MeetingMinutes.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeetingMinutes.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240530094227_UpdateMeetingFKs")]
    partial class UpdateMeetingFKs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.CorporateCustomer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerId");

                    b.ToTable("Corporate_Customer_Tbl", (string)null);
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.IndividualCustomer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CustomerId");

                    b.ToTable("Individual_Customer_Tbl", (string)null);
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.LogEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("LogEvents", (string)null);
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.MeetingMinutesDetails", b =>
                {
                    b.Property<long>("DetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DetailsId"));

                    b.Property<long?>("MeetingMinutesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductServiceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DetailsId");

                    b.HasIndex("MeetingMinutesId");

                    b.HasIndex("ProductServiceId");

                    b.ToTable("Meeting_Minutes_Details_Tbl", (string)null);
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.MeetingMinutesMaster", b =>
                {
                    b.Property<long>("MeetingMinutesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MeetingMinutesId"));

                    b.Property<string>("Agenda")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CorporateCustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Datetime")
                        .HasColumnType("datetime");

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discussion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HostSide")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("IndividualCustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MeetingMinutesId");

                    b.HasIndex("CorporateCustomerId");

                    b.HasIndex("IndividualCustomerId");

                    b.ToTable("Meeting_Minutes_Master_Tbl", (string)null);
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.ProductsService", b =>
                {
                    b.Property<long>("ProductServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProductServiceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ProductServiceId");

                    b.ToTable("Products_Service_Tbl", (string)null);
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.MeetingMinutesDetails", b =>
                {
                    b.HasOne("MeetingMinutes.Domain.Entities.MeetingMinutesMaster", "MeetingMinutes")
                        .WithMany("MeetingDetails")
                        .HasForeignKey("MeetingMinutesId");

                    b.HasOne("MeetingMinutes.Domain.Entities.ProductsService", "ProductService")
                        .WithMany("MeetingMinutesDetailsTbls")
                        .HasForeignKey("ProductServiceId");

                    b.Navigation("MeetingMinutes");

                    b.Navigation("ProductService");
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.MeetingMinutesMaster", b =>
                {
                    b.HasOne("MeetingMinutes.Domain.Entities.CorporateCustomer", "CorporateCustomer")
                        .WithMany("MeetingMinutesMasterTbls")
                        .HasForeignKey("CorporateCustomerId");

                    b.HasOne("MeetingMinutes.Domain.Entities.IndividualCustomer", "IndividualCustomer")
                        .WithMany("MeetingMinutesMasterTbls")
                        .HasForeignKey("IndividualCustomerId");

                    b.Navigation("CorporateCustomer");

                    b.Navigation("IndividualCustomer");
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.CorporateCustomer", b =>
                {
                    b.Navigation("MeetingMinutesMasterTbls");
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.IndividualCustomer", b =>
                {
                    b.Navigation("MeetingMinutesMasterTbls");
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.MeetingMinutesMaster", b =>
                {
                    b.Navigation("MeetingDetails");
                });

            modelBuilder.Entity("MeetingMinutes.Domain.Entities.ProductsService", b =>
                {
                    b.Navigation("MeetingMinutesDetailsTbls");
                });
#pragma warning restore 612, 618
        }
    }
}
